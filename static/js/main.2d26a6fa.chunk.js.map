{"version":3,"sources":["search-results/SearchResults.tsx","book-search/BookSearch.tsx","wish-list/WishList.tsx","shared/fetchUrl/fetchUrl.ts","service/book-search.service.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchResults","props","console","log","className","allAvailableBooks","length","map","books","isAvailableInwishList","wishList","filter","book","id","imageLinks","smallThumbnail","src","alt","authors","categories","title","description","onClick","addToWishList","BookSearch","onSubmit","e","preventDefault","updateBookTypeToSearch","bookType","autoFocus","name","type","value","placeholder","onChange","updateBookType","target","WishList","removeFromWishList","fetchUrl","url","config","fetch","then","response","a","json","data","ok","Promise","reject","getBooksByType","method","headers","bookInfo","volumeInfo","items","item","bookDetails","App","useState","bookTypeToSearch","setAllAvailableBooks","updateWishList","useEffect","requestBooks","allBooks","bookToAdd","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0SAmDeA,EA5CO,SAACC,GAInB,OAFAC,QAAQC,IAAIF,EAAO,SAGf,oCACI,yBAAKG,UAAU,gBAEVH,GAASA,EAAMI,mBACZJ,EAAMI,kBAAkBC,OAAS,GACjCL,EAAMI,kBAAkBE,KAAI,SAACC,GACzB,IAAMC,EAAwBR,EAAMS,SAASC,QAAO,SAACC,GAAD,OAAcA,EAAKC,KAAKL,EAAMK,MAAIP,OAAO,EAC7F,OAAQ,yBAAKF,UAAU,SACnB,yBAAKA,UAAU,cACdI,GAASA,EAAMM,YAAcN,EAAMM,WAAWC,gBAC7C,yBAAKC,IAAKR,GAASA,EAAMM,YAAcN,EAAMM,WAAWC,eAAgBE,IAAI,0BAG9E,yBAAKb,UAAU,eACX,yBAAKA,UAAU,gBACVI,GAASA,EAAMU,SAAWV,EAAMU,QAAQZ,QAAUE,EAAMU,QAAQ,IAAO,yCAC3DV,GAASA,EAAMU,SAAWV,EAAMU,QAAQZ,QAAUE,EAAMU,QAAQ,IAC5EV,GAASA,EAAMW,YAAcX,EAAMW,WAAWb,QAAUE,EAAMW,WAAW,IACtE,wCAAcX,GAASA,EAAMW,YAAcX,EAAMW,WAAWb,QAAUE,EAAMW,WAAW,KAG9FX,GAASA,EAAMY,OAAU,wBAAIhB,UAAU,gBAAgBI,EAAMY,OAC7DZ,GAASA,EAAMa,aAAe,yBAAKjB,UAAU,sBAAsBI,EAAMa,aACzEZ,EACG,4BAAQL,UAAU,mBAAlB,0BACE,4BAAQA,UAAU,kBAAkBkB,QAAS,WAAQrB,EAAMsB,cAAcf,EAAMK,MAA/E,4BC2CvBW,EAjEI,SAACvB,GAchB,OACI,oCACI,yBAAKG,UAAU,qBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,UACX,0BACIqB,SAAU,SAACC,GAEPA,EAAEC,iBACF1B,EAAM2B,uBAAuB3B,EAAM4B,YAGvC,2BACIzB,UAAU,oBACV0B,WAAS,EACTC,KAAK,UACLC,KAAK,SACLC,MAAOhC,EAAM4B,SACbK,YAAY,mBAEZC,SAxBX,SAACT,GACdzB,EAAMmC,eAAeV,EAAEW,OAAOJ,OAC9BhC,EAAM2B,uBAAuB3B,EAAM4B,aAwBf,gCACI,kBAAC,IAAD,CAAUzB,UAAU,0BAKzBH,EAAM4B,UACL,yBAAKzB,UAAU,SACX,4DASpB,yBAAKA,UAAU,iBACdH,EAAMO,OAAS,kBAAC,EAAD,CAAeH,kBAAmBJ,EAAMO,MAAOe,cAAetB,EAAMsB,cAAeb,SAAUT,EAAMS,cCtChH4B,EAzBE,SAACrC,GAEd,OACI,oCACE,yBAAKG,UAAU,gBACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAASA,UAAU,iBACnB,6CAGN,yBAAKA,UAAU,kBACZH,GAASA,EAAMO,OAASP,EAAMO,MAAMD,KAAI,SAAAK,GACvC,OAAS,yBAAKR,UAAU,sBACrBQ,EAAKQ,OAAS,yBAAKhB,UAAU,kBAAf,IAAkCQ,EAAKQ,MAAvC,KACjB,4BAAQhB,UAAU,sBAAsBkB,QAAS,WAAKrB,EAAMsC,mBAAmB3B,EAAKC,MAC/E,kBAAC,IAAD,cCRF2B,EALE,SAACC,GAAD,IAAcC,EAAd,uDAAuB,GAAvB,OACbC,MAAMF,EAAKC,GAAQE,KAAnB,uCAAwB,WAAMC,GAAN,eAAAC,EAAA,sEACDD,EAASE,OADR,cACdC,EADc,yBAEbH,EAASI,GAAKD,EAAOE,QAAQC,OAAOH,IAFvB,2CAAxB,wDCPG,SAAeI,EAAtB,kC,4CAAO,WAA8BpB,GAA9B,iBAAAc,EAAA,+EAEyBN,EAAS,iDAAD,OAAkDR,GAAQ,CACtFqB,OAAQ,MACRC,QAAS,CACL,eAAgB,sBALzB,cAEOC,EAFP,OASCrD,QAAQC,IAAIoD,GACNC,EAAaD,GAAaA,EAASE,OAAQF,EAASE,MAAMlD,KAAI,SAACmD,GACjE,IAAMC,EAAaD,EAAKF,WAExB,OADAG,EAAY9C,GAAG6C,EAAK7C,GACb8C,KAbZ,kBAeQH,GAfR,yDAiBQ,IAjBR,0D,sBCwDQI,MAnDf,WAAgB,IAAD,EACsBC,mBAAS,IAD/B,mBACNhC,EADM,KACIO,EADJ,OAEsCyB,mBAAS,IAF/C,mBAENC,EAFM,KAEYlC,EAFZ,OAGqCiC,mBAAc,IAHnD,mBAGNxD,EAHM,KAGa0D,EAHb,OAIsBF,mBAAc,IAJpC,mBAINnD,EAJM,KAIIsD,EAJJ,KAMXC,qBAAU,WACDC,MACN,CAACJ,IAEN,IAAMI,EAAY,uCAAG,4BAAApB,EAAA,0DACfgB,EADe,gCAEQV,EAAeU,GAFvB,OAETK,EAFS,OAGfJ,EAAqBI,GAHN,2CAAH,qDAclB,OACE,yBAAK/D,UAAU,WACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,UACb,8CACA,kBAAC,IAAD,CAAQA,UAAU,eAElB,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAYI,MAAOH,EACnBwB,SAAUA,EACVO,eAAgBA,EAChBR,uBAAwBA,EACxBL,cApBY,SAACV,GACrB,IAAMuD,EAAY/D,EAAkBM,QAAO,SAACC,GAAD,OAAYA,EAAKC,KAAKA,KACjEmD,EAAe,GAAD,mBAAKtD,GAAL,YAAiB0D,MAmBvB1D,SAAUA,MAId,yBAAKN,UAAU,YACX,kBAAC,EAAD,CACAI,MAAOE,EACP6B,mBAxBiB,SAAC1B,GAC1BmD,EAAetD,EAASC,QAAO,SAACC,GAAD,OAAYA,EAAKC,KAAKA,YChBnCwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnF,QAAQmF,MAAMA,EAAMC,c","file":"static/js/main.2d26a6fa.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\ntype searchResult = {\r\n    allAvailableBooks: Array<any>,\r\n    addToWishList: any,\r\n    wishList: Array<string>\r\n}\r\nconst SearchResults = (props: searchResult) => {\r\n\r\n    console.log(props, \"props\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"booksWrapper\">\r\n                {/* <pre>{JSON.stringify(props.allAvailableBooks, null, 4)}</pre> */}\r\n                {props && props.allAvailableBooks &&\r\n                    props.allAvailableBooks.length > 0 &&\r\n                    props.allAvailableBooks.map((books: any) => {\r\n                        const isAvailableInwishList = props.wishList.filter((book:any) => book.id===books.id).length>0;\r\n                        return (<div className=\"books\">\r\n                            <div className=\"books__img\">\r\n                            {books && books.imageLinks && books.imageLinks.smallThumbnail &&\r\n                              <img src={books && books.imageLinks && books.imageLinks.smallThumbnail} alt=\"Image is unavailable\"/>\r\n                            }\r\n                            </div>\r\n                            <div className=\"books__info\">\r\n                                <div className=\"books__genre\">\r\n                                    {books && books.authors && books.authors.length && books.authors[0] && (<span>\r\n                                        Author: {books && books.authors && books.authors.length && books.authors[0]}</span>)}\r\n                                    {books && books.categories && books.categories.length && books.categories[0] && (\r\n                                        <span>Genre: {books && books.categories && books.categories.length && books.categories[0]}</span>\r\n                                    )}\r\n                                </div>\r\n                                {books && books.title && (<h1 className=\"books__title\">{books.title}</h1>)}\r\n                                {books && books.description && <div className=\"books__description\">{books.description}</div>}\r\n                                {isAvailableInwishList ?\r\n                                    <button className=\"book__searchbtn\" >Available in wish list</button>\r\n                                    : <button className=\"book__searchbtn\" onClick={() => { props.addToWishList(books.id) }}>Add to wish list</button>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        )\r\n                    })\r\n                }\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchResults;","import React, { useEffect, useState } from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport SearchResults from \"../search-results/SearchResults\";\r\n\r\ntype booksProps ={\r\n    books:Array<any>,\r\n    bookType:string,\r\n    updateBookType:any,\r\n    updateBookTypeToSearch :any,\r\n    addToWishList:any,\r\n    wishList:Array<string>\r\n\r\n\r\n}\r\n\r\nconst BookSearch = (props:booksProps) => {\r\n    \r\n\r\n    // const volumeInfo = allAvailableBooks &&  allAvailableBooks.items &&allAvailableBooks.items.map((item: any) => item.volumeInfo);\r\n   // console.log(allAvailableBooks, \"allavailablebooks\");\r\n\r\n   // const ComponentProps = {\r\n     //   allAvailableBooks: allAvailableBooks\r\n    //}\r\n\r\n    const onChange = (e:any) => {\r\n        props.updateBookType(e.target.value);\r\n        props.updateBookTypeToSearch(props.bookType);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"search__container\">\r\n                <div className=\"search__wrapper\">\r\n                    <div className=\"search\">\r\n                        <form\r\n                            onSubmit={(e) => {\r\n                                \r\n                                e.preventDefault();\r\n                                props.updateBookTypeToSearch(props.bookType)\r\n                            }}\r\n                        >\r\n                            <input\r\n                                className=\"search-bar__input\"\r\n                                autoFocus\r\n                                name=\"gsearch\"\r\n                                type=\"search\"\r\n                                value={props.bookType}\r\n                                placeholder=\"Search for books\"\r\n                                // onChange={e => updateBookType(e.target.value)}\r\n                                onChange={onChange}\r\n                            />\r\n                            <button >\r\n                                <FaSearch className=\"search-bar__submit\"/>\r\n                            </button>\r\n                        </form>\r\n\r\n                        {/* placeholder code */}\r\n                        {!(props.bookType) && (\r\n                            <div className=\"empty\">\r\n                                <p>\r\n                                    Try searching for a topic\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"searchContent\">\r\n            {props.books && <SearchResults allAvailableBooks={props.books} addToWishList={props.addToWishList} wishList={props.wishList}/>}\r\n            </div>\r\n            \r\n            {/* {allAvailableBooks && (<div className=\"searchResults\">\r\n                <pre>{JSON.stringify(allAvailableBooks, null, 4)}</pre>\r\n            </div> */}\r\n            {/* )} */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BookSearch;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FaMagic, FaTrashAlt } from 'react-icons/fa';\r\ntype typeWishList = {\r\n  books:Array<any>,\r\n  removeFromWishList:any\r\n}\r\nconst WishList = (props:typeWishList) => {\r\n    \r\n    return (\r\n        <>\r\n          <div className=\"nav-wishlist\">\r\n            <div className=\"button\">\r\n              <FaMagic className=\"wishListIcon\" />\r\n              <span>Wish List</span>\r\n            </div>\r\n          </div>\r\n        <div className=\"wish-book-list\">\r\n          {props && props.books && props.books.map(book=>{\r\n            return   <div className=\"wishlist_each_item\">\r\n              {book.title && <div className=\"wishlist_title\"> {book.title} </div>}\r\n            <button className=\"wishlist__searchbtn\" onClick={()=>{props.removeFromWishList(book.id)}}>\r\n                 <FaTrashAlt/> \r\n            </button>              \r\n            </div>\r\n          })}\r\n           \r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WishList;\r\n","\r\n/**\r\n * Fetch call always resolves even with bad requests (except network error)\r\n * so adding a wrapper over fetch to reject request if response is not ok\r\n * Rejected promise can be caught with catch at the calling functions and can be handled\r\n * @param url\r\n * @param config\r\n */\r\nconst fetchUrl = (url: string, config = {}): Promise<any> =>\r\n    fetch(url, config).then(async response => {\r\n        const data = await response.json();\r\n        return response.ok ? data : Promise.reject(data);\r\n    });\r\nexport default fetchUrl;\r\n","import  fetchUrl from './../shared/fetchUrl/fetchUrl';\r\n\r\nexport async function getBooksByType(type: string) {\r\n    try {\r\n        const bookInfo =  await fetchUrl(`https://www.googleapis.com/books/v1/volumes?q=${type}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n            }\r\n        });\r\n\r\n        console.log(bookInfo);\r\n        const volumeInfo = bookInfo &&  bookInfo.items &&bookInfo.items.map((item: any) => {\r\n            const bookDetails =item.volumeInfo;\r\n            bookDetails.id=item.id;\r\n            return bookDetails;\r\n        });\r\n        return volumeInfo;\r\n    } catch(exception) {\r\n        return [];\r\n\r\n    }\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport './styles/App.scss';\r\nimport BookSearch from './book-search/BookSearch';\r\nimport WishList from './wish-list/WishList';\r\nimport { FaBars } from 'react-icons/fa';\r\nimport { getBooksByType } from \"./service/book-search.service\";\r\n\r\nfunction App() {\r\n  const [bookType, updateBookType] = useState(\"\");\r\n  const [bookTypeToSearch, updateBookTypeToSearch] = useState(\"\");  \r\n  const [allAvailableBooks, setAllAvailableBooks] = useState<any>([]);\r\n  const [wishList, updateWishList] = useState<any>([]);\r\n\r\n    useEffect(() => {\r\n             requestBooks();\r\n    }, [bookTypeToSearch]);\r\n\r\n  const requestBooks = async () => {\r\n    if (bookTypeToSearch) {\r\n        const allBooks = await getBooksByType(bookTypeToSearch);\r\n        setAllAvailableBooks(allBooks);\r\n    }\r\n}\r\nconst addToWishList = (id:string) =>{\r\n  const bookToAdd = allAvailableBooks.filter((book:any)=>book.id===id)\r\n  updateWishList([...wishList,...bookToAdd]);\r\n}\r\nconst removeFromWishList = (id:string) => {\r\n  updateWishList(wishList.filter((book:any)=>book.id!==id));\r\n}\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"content\">\r\n      <div className=\"header\">\r\n        <label>Urban Reads</label>\r\n        <FaBars className=\"hamburger\"/>\r\n      </div>\r\n        <div className=\"searchArea\">\r\n          <BookSearch books={allAvailableBooks}\r\n          bookType={bookType}\r\n          updateBookType={updateBookType}\r\n          updateBookTypeToSearch={updateBookTypeToSearch}\r\n          addToWishList={addToWishList}\r\n          wishList={wishList}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"wishList\">\r\n          <WishList \r\n          books={wishList}\r\n          removeFromWishList={removeFromWishList}\r\n          />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}